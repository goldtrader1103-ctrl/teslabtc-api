# ============================================================
# üöÄ TESLABTC.KG ‚Äî API PRINCIPAL (versi√≥n 3.1 estable)
# ============================================================

from fastapi import FastAPI
from datetime import datetime, timezone, timedelta

from utils.price_utils import (
    obtener_precio,
    sesion_ny_activa,
    _pdh_pdl
)
from utils.estructura_utils import (
    evaluar_estructura,
    definir_escenario
)

# ============================================================
# üåé Configuraci√≥n base
# ============================================================

TZ_COL = timezone(timedelta(hours=-5))
app = FastAPI(
    title="TESLABTC.KG API",
    description="An√°lisis operativo del mercado BTCUSDT basado en Price Action puro, estructura, liquidez y escenarios TESLABTC.KG",
    version="3.1.0"
)

# ============================================================
# üìä ENDPOINT PRINCIPAL /analizar
# ============================================================

@app.get("/analizar", tags=["TESLABTC.KG"])
def analizar():
    """An√°lisis operativo en tiempo real del mercado BTCUSDT."""
    try:
        # 1Ô∏è‚É£ Obtener precio actual
        precio_info = obtener_precio("BTCUSDT")
        precio = precio_info["precio"]
        fuente = precio_info["fuente"]

        # 2Ô∏è‚É£ Evaluar estructura (H4, H1, M15)
        estructura_info = evaluar_estructura("BTCUSDT")
        estructura = estructura_info["estructura"]
        zonas = estructura_info["zonas"]

        # 3Ô∏è‚É£ Definir escenario operativo
        escenario = definir_escenario(estructura)

        # 4Ô∏è‚É£ Obtener PDH/PDL (√∫ltimas 24h)
        pdh_pdl = _pdh_pdl("BTCUSDT")

        # 5Ô∏è‚É£ Estado de sesi√≥n NY
        sesion = "‚úÖ Activa (Sesi√≥n New York)" if sesion_ny_activa() else "‚ùå Cerrada (Fuera de sesi√≥n NY)"

        # 6Ô∏è‚É£ Construir respuesta final
        ahora = datetime.now(TZ_COL)

        return {
            "üß† TESLABTC.KG": {
                "fecha": ahora.strftime("%d/%m/%Y %H:%M:%S"),
                "sesion": sesion,
                "precio_actual": f"{precio:,.2f} USD" if precio else "‚öôÔ∏è No disponible",
                "fuente_precio": fuente,
                "estructura_detectada": estructura,
                "zonas": {
                    "PDH (alto 24h)": pdh_pdl.get("PDH"),
                    "PDL (bajo 24h)": pdh_pdl.get("PDL"),
                    **zonas
                },
                "escenario": escenario,
                "mensaje": "‚ú® An√°lisis completado correctamente",
                "error": "Ninguno"
            }
        }

    except Exception as e:
        print(f"[analizar] Error: {e}")
        return {
            "üß† TESLABTC.KG": {
                "fecha": datetime.now(TZ_COL).strftime("%d/%m/%Y %H:%M:%S"),
                "sesion": "‚ö†Ô∏è No verificada",
                "precio_actual": "‚öôÔ∏è No disponible",
                "fuente_precio": "N/A",
                "estructura_detectada": "sin_datos",
                "zonas": {},
                "escenario": {"escenario": "sin_datos", "raz√≥n": str(e)},
                "mensaje": "‚ö†Ô∏è Error al obtener datos en vivo",
                "error": str(e)
            }
        }

# ============================================================
# üè† ENDPOINT BASE /
# ============================================================

@app.get("/", tags=["Estado"])
def estado_general():
    """Verifica que el sistema TESLABTC.KG est√© en l√≠nea."""
    return {
        "status": "‚úÖ Activo",
        "api": "TESLABTC.KG v3.1.0",
        "mensaje": "Sistema operativo ‚Äî listo para an√°lisis BTCUSDT",
        "autora": "Katherinne Galvis"
    }

# ============================================================
# üïì ENDPOINT SESI√ìN NY
# ============================================================

@app.get("/ny-session", tags=["Sesi√≥n"])
def ny_session_status():
    """Verifica si la sesi√≥n de Nueva York est√° activa."""
    estado = sesion_ny_activa()
    ahora = datetime.now(TZ_COL)
    return {
        "fecha": ahora.strftime("%d/%m/%Y %H:%M:%S"),
        "sesion_ny": "‚úÖ Activa" if estado else "‚ùå Cerrada",
        "horario": "07:00‚Äì13:30 COL (Lun‚ÄìVie)",
        "mensaje": "Dentro del horario operativo" if estado else "Fuera del horario operativo"
        }

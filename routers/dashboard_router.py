from fastapi import APIRouter
from utils.price_utils import obtener_precio, obtener_klines_binance
from datetime import datetime
import pytz

router = APIRouter()

@router.get("/estado_general", tags=["TESLABTC"])
def estado_general_teslabtc():
    """
    An√°lisis TESLABTC A.P. ‚Äî versi√≥n con detecci√≥n de setups A+ y estructura H1‚ÄìM5.
    """
    timestamp = datetime.now(pytz.timezone("America/Bogota")).strftime("%Y-%m-%d %H:%M:%S")
    precio = obtener_precio()

    # -------------------------------
    # Sesi√≥n NY (7:00 a 13:30 COL)
    # -------------------------------
    hora_actual = datetime.now(pytz.timezone("America/Bogota")).hour + datetime.now(pytz.timezone("America/Bogota")).minute/60
    sesion_activa = 7 <= hora_actual <= 13.5
    sesion_ny = "‚úÖ Activa (07:00‚Äì13:30 COL)" if sesion_activa else "üïì Fuera de sesi√≥n NY"

    # -------------------------------
    # Confirmaciones simuladas (debes conectar con tus condiciones reales)
    # -------------------------------
    bos_h1 = True       # Flujo macro bajista
    bos_m15 = False     # Sin BOS M15 (impulso extendido)
    bos_m5 = True       # Confirmaci√≥n interna M5
    barrida_liquidez = True  # Barrida de Asia o PDH detectada

    # -------------------------------
    # Setup A+ y clasificaci√≥n de probabilidad
    # -------------------------------
    if bos_h1 and bos_m5 and barrida_liquidez and not bos_m15:
        escenario_probabilidad = "ALTA üî•"
        detalle_escenario = "BOS M5 alineado con BOS H1 tras barrida de liquidez ‚Äî setup A+ TESLABTC A.P."
        escenario_sugerido = "Esperar redistribuci√≥n o reacci√≥n en OB/FVG M5 a favor de H1."
    elif bos_m15:
        escenario_probabilidad = "MEDIA ‚úÖ"
        detalle_escenario = "BOS M15 confirmado dentro de zona H1/H4 ‚Äî setup cl√°sico TESLABTC."
        escenario_sugerido = "Retroceso M5 dentro de OB/FVG M15."
    else:
        escenario_probabilidad = "BAJA ‚ö†Ô∏è"
        detalle_escenario = "Sin BOS claro en M15 ni M5 ‚Äî observaci√≥n de estructura."
        escenario_sugerido = "Esperar BOS confirmatorio o mitigaci√≥n profunda."

    # -------------------------------
    # Klines (velas recientes para an√°lisis futuro)
    # -------------------------------
    velas = obtener_klines_binance("1h", limite=20)
    ultima_vela = velas[-1] if velas else None

    # -------------------------------
    # Respuesta JSON
    # -------------------------------
    resultado = {
        "timestamp": timestamp,
        "precio_actual": precio,
        "direccion_macro": "Bajista üìâ" if bos_h1 else "Rango ‚è∏Ô∏è",
        "sesion_NY": sesion_ny,
        "escenario_probabilidad": escenario_probabilidad,
        "detalle_escenario": detalle_escenario,
        "escenario_sugerido": escenario_sugerido,
        "confirmaciones": {
            "BOS H1": "‚úÖ" if bos_h1 else "‚ùå",
            "BOS M15": "‚úÖ" if bos_m15 else "‚ùå",
            "BOS M5": "‚úÖ" if bos_m5 else "‚ùå",
            "Barrida": "‚úÖ" if barrida_liquidez else "‚ùå",
            "Sesi√≥n NY": "‚úÖ" if sesion_activa else "‚ùå"
        },
        "ultima_vela": ultima_vela,
        "conclusion": f"TESLABTC A.P. ‚Äî Acci√≥n del Precio Pura. Escenario {escenario_probabilidad}. üí¨ 'Tu mentalidad, disciplina y constancia definen tus resultados.'"
    }

    return resultado
